#!/usr/bin/env python

##
## Rando/NIST/Util.py
##

###############################################################################
###############################################################################
## DEPENDENCIES:
###############################################################################
###############################################################################
##
## numpy
## scipy
##
###############################################################################
###############################################################################
##
## TODO:
##
###############################################################################
###############################################################################
## USAGE
###############################################################################
###############################################################################
##
## import Rando.NIST.Util as Util
##
###############################################################################
###############################################################################

import numpy as np
import scipy.special as spc
import sys


###############################################################################
###############################################################################
##
## Rando.NIST.Util
##
###############################################################################
###############################################################################


def su(x, y): return x + y
def sus(x): return (x - 0.5) ** 2
def logo(x): return x * np.log(x)
def sumi(x): return 2 * x - 1

def stringpart(binin, num):
    blocks = [binin[xs * num:num + xs * num:] for xs in xrange(len(binin) / num)]
    return blocks

def pr(u, x):
    if u == 0:
        out=1.0 * np.exp(-x)
    else:
        out=1.0 * x * np.exp(2*-x) * (2**-u) * spc.hyp1f1(u + 1, 2, x)
    return out

def occurances(string, sub):
    count=start=0
    while True:
        start=string.find(sub,start)+1
        if start>0:
            count+=1
        else:
            return count

def pik(k,x):
    if k==0:
        out=1-1.0/(2*np.abs(x))
    elif k>=5:
        out=(1.0/(2*np.abs(x)))*(1-1.0/(2*np.abs(x)))**4
    else:
        out=(1.0/(4*x*x))*(1-1.0/(2*np.abs(x)))**(k-1)
    return out

def getfreq(linn, nu):
    val = 0
    for (x, y) in linn:
        if x == nu:
            val = y
    return val
